/// <reference types="node" />
import { EventEmitter } from "events";
import { DBusObject } from "./dbusObject";
import { Message } from "./message";
import { DBusService } from "./dbusService";
import { Interfaces } from "@dbus-types/dbus";
import { Connection } from "./connection";
import { DBusInterface } from "./dbusInterface";
export declare class MessageBus<K extends {
    [name: string]: any;
} = {}> {
    connection: Connection;
    private opts;
    serial: number;
    private cookies;
    private methodCallHandlers;
    signals: EventEmitter;
    exportedObjects: any;
    private name;
    private _dbus;
    constructor(connection: Connection, opts?: any);
    dbus(): Promise<DBusInterface & import("@dbus-types/dbus").org.freedesktop.DBus>;
    invoke(msg: Message): Promise<any>;
    invokeDbus(msg: Message): Promise<any>;
    mangle(msg: Message): string;
    mangle(path: string, iface: string, member: string): string;
    sendSignal(path: string, iface: string, name: string, signature?: string, args?: any): void;
    sendError(msg: Message, errorName: string, errorText: string): void;
    sendReply(msg: Message, signature: string, body: any): void;
    private onMessage;
    setMethodCallHandler(objectPath: any, iface: any, member: any, handler: any): void;
    exportInterface(obj: any, path: any, iface: any): void;
    getService(name: string): DBusService<K>;
    getObject(service: any, name: any): Promise<DBusObject<K>>;
    getInterface<T extends keyof Interfaces>(service: string, name: string, inf: T): Promise<DBusInterface & Interfaces[T]>;
    getInterface<T extends keyof K>(service: string, name: string, inf: T): Promise<DBusInterface & K[T]>;
    getInterface(service: string, name: string, inf: string): Promise<DBusInterface>;
}
