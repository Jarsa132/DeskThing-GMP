"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processFile = exports.processXML = exports.introspectBus = void 0;
const xml2js_1 = require("xml2js");
const dbusInterface_1 = require("../dbusInterface");
const promises_1 = require("fs/promises");
async function introspectBus(obj) {
    const xml = await obj?.service?.bus?.invoke({
        destination: obj.service.name,
        path: obj.name,
        interface: 'org.freedesktop.DBus.Introspectable',
        member: 'Introspect'
    });
    if (!xml)
        throw new Error('unable to introspect');
    return await processXML(xml, obj);
}
exports.introspectBus = introspectBus;
async function processXML(xml, obj) {
    const parser = new xml2js_1.Parser();
    let result = await parser.parseStringPromise(xml);
    if (!result.node)
        throw new Error('No root XML node');
    result = result.node; // unwrap the root node
    // If no interface, try first sub node?
    if (!result.interface) {
        if (result.node && result.node.length > 0 && result.node[0]['$']) {
            let subObj = Object.assign(obj, {});
            if (subObj.name.slice(-1) !== '/')
                subObj.name += '/';
            subObj.name += result.node[0]['$'].name;
            return await introspectBus(subObj);
        }
        throw new Error('No such interface found');
    }
    const proxy = {};
    const nodes = [];
    let ifaceName;
    const ifaces = result['interface'];
    const xmlnodes = result['node'] || [];
    for (let node of xmlnodes) {
        if (node && node['$'] && node['$']['name']) {
            nodes.push(node['$']['name']);
        }
    }
    for (let iface of ifaces) {
        ifaceName = iface['$'].name;
        proxy[ifaceName] = new dbusInterface_1.DBusInterface(obj, iface);
    }
    return [obj.name, proxy, nodes];
}
exports.processXML = processXML;
async function processFile(file) {
    const proxy = {};
    const parser = new xml2js_1.Parser();
    let result = await parser.parseStringPromise(await (0, promises_1.readFile)(file));
    if (!result.node)
        throw new Error('No root XML node');
    result = result.node;
    if (!result.interface) {
        throw new Error('No such interface found');
    }
    let ifaceName;
    const ifaces = result['interface'];
    for (let iface of ifaces) {
        ifaceName = iface['$'].name;
        proxy[ifaceName] = new dbusInterface_1.DBusInterface(null, iface);
    }
    return proxy;
}
exports.processFile = processFile;
//# sourceMappingURL=introspect.js.map