"use strict";
// parse signature from string to tree
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSignature = void 0;
let match = {
    '{': '}',
    '(': ')'
};
let knownTypes = {};
'(){}ybnqiuxtdsogarvehm*?@&^'.split('').forEach(function (c) {
    knownTypes[c] = true;
});
function parseSignature(signature) {
    let index = 0;
    function next() {
        if (index < signature.length) {
            let c = signature[index];
            ++index;
            return c;
        }
        return null;
    }
    function parseOne(c) {
        function checkNotEnd(c) {
            if (!c)
                throw new Error('Bad signature: unexpected end');
            return c;
        }
        if (!knownTypes[c])
            throw new Error(`Unknown type: "${c}" in signature "${signature}"`);
        let ele;
        let res = { type: c, child: [] };
        switch (c) {
            case 'a': // array
                ele = next();
                checkNotEnd(ele);
                res.child.push(parseOne(ele));
                return res;
            case '{': // dict entry
            case '(': // struct
                while ((ele = next()) !== null && ele !== match[c])
                    res.child.push(parseOne(ele));
                checkNotEnd(ele);
                return res;
        }
        return res;
    }
    let ret = [];
    let c;
    while ((c = next()) !== null)
        ret.push(parseOne(c));
    return ret;
}
exports.parseSignature = parseSignature;
const fromTree = function (tree) {
    let res = '';
    for (let i = 0; i < tree.length; ++i) {
        if (tree[i].child.length === 0) {
            res += tree[i].type;
        }
        else {
            if (tree[i].type === 'a') {
                res += `a${fromTree(tree[i].child)}`;
            }
            else {
                res += tree[i].type + fromTree(tree[i].child) + match[tree[i].type];
            }
        }
    }
    return res;
};
//# sourceMappingURL=signature.js.map