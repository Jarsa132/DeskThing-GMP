/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from "events";
import { Readable, Writable } from "stream";
import { Opts } from './utils/handshake';
import { MessageBus } from './messageBus';
import { Message } from './message';
export declare type ConnectOpts = ({
    stream: Readable & Writable;
} | {
    host: string;
    port: number;
} | {
    socket: string;
} | {
    busAddress?: string;
});
export declare class Connection extends EventEmitter {
    stream: Readable & Writable;
    message: (msg: Message) => void;
    private state;
    private guid;
    private _messages;
    constructor(stream: Readable & Writable);
    init(opts?: ConnectOpts & Opts): Promise<void>;
    write(chunk: any): boolean;
    end(): this;
}
export declare function createConnection(opts?: ConnectOpts & Opts): Promise<Connection>;
export declare function createClient<K extends {
    [name: string]: any;
} = {}>(opts?: ConnectOpts & Opts): Promise<MessageBus<K>>;
export declare function systemBus<K extends {
    [name: string]: any;
} = {}>(opts?: Opts): Promise<MessageBus<K>>;
export declare function sessionBus<K extends {
    [name: string]: any;
} = {}>(opts?: ConnectOpts & Opts): Promise<MessageBus<K>>;
