"use strict";
// dbus.freedesktop.org/doc/dbus-specification.html
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sessionBus = exports.systemBus = exports.createClient = exports.createConnection = exports.Connection = void 0;
const events_1 = require("events");
const net = __importStar(require("net"));
const messageParser_1 = require("./utils/messageParser");
const handshake_1 = require("./utils/handshake");
const messageBus_1 = require("./messageBus");
function createStream(opts) {
    if (typeof opts !== 'object') {
        opts = {};
    }
    if ("stream" in opts) {
        return opts.stream;
    }
    if ("socket" in opts) {
        return net.createConnection(opts.socket);
    }
    if ("port" in opts) {
        return net.createConnection(opts.port, opts.host);
    }
    let busAddress = opts.busAddress || process.env.DBUS_SESSION_BUS_ADDRESS;
    if (!busAddress)
        throw new Error('unknown bus address');
    let addresses = busAddress.split(';');
    for (let i = 0; i < addresses.length; ++i) {
        let address = addresses[i];
        let familyParams = address.split(':');
        let family = familyParams[0];
        let params = {};
        familyParams[1].split(',').map(function (p) {
            let keyVal = p.split('=');
            params[keyVal[0]] = keyVal[1];
        });
        try {
            switch (family.toLowerCase()) {
                case 'tcp':
                    let host = params.host || 'localhost';
                    let port = params.port;
                    return net.createConnection(port, host);
                case 'unix':
                    if (params.socket)
                        return net.createConnection(params.socket);
                    if (params.path)
                        return net.createConnection(params.path);
                    throw new Error("not enough parameters for 'unix' connection - you need to specify 'socket' or 'path' parameter");
                default:
                    throw new Error('unknown address type:' + family);
            }
        }
        catch (e) {
            if (i < addresses.length - 1) {
                console.warn(e.message);
            }
            else {
                throw e;
            }
        }
    }
}
class Connection extends events_1.EventEmitter {
    constructor(stream) {
        super();
        this.stream = stream;
        this._messages = [];
        stream.on('error', (err) => {
            // forward network and stream errors
            this.emit('error', err);
        });
        stream.on('end', () => {
            this.emit('end');
            this.message = () => {
                throw new Error("dbus socket closed");
            };
        });
        this.message = (msg) => this._messages.push(msg);
        this.once('connect', () => {
            this.state = 'connected';
            for (let msg of this._messages) {
                this.write((0, messageParser_1.marshallMessage)(msg));
            }
            this._messages = [];
            // no need to buffer once connected
            this.message = (msg) => {
                this.write((0, messageParser_1.marshallMessage)(msg));
            };
        });
        if (typeof stream.setNoDelay === 'function') {
            stream.setNoDelay();
        }
    }
    async init(opts) {
        if (this.guid)
            return;
        this.guid = await (0, handshake_1.clientHandshake)(this.stream, opts);
        this.emit('connect');
        (0, messageParser_1.messageParser)(this.stream, (msg) => {
            this.emit('message', msg);
        }, opts);
    }
    write(chunk) {
        return this.stream.write(chunk);
    }
    end() {
        this.stream.end();
        return this;
    }
}
exports.Connection = Connection;
async function createConnection(opts) {
    if (!opts)
        opts = {};
    let conn = new Connection(createStream(opts));
    await conn.init(opts);
    return conn;
}
exports.createConnection = createConnection;
async function createClient(opts) {
    let connection = await createConnection(opts || {});
    return new messageBus_1.MessageBus(connection, opts || {});
}
exports.createClient = createClient;
async function systemBus(opts) {
    return await createClient({
        ...opts,
        busAddress: process.env.DBUS_SYSTEM_BUS_ADDRESS ||
            'unix:path=/var/run/dbus/system_bus_socket'
    });
}
exports.systemBus = systemBus;
async function sessionBus(opts) {
    return await createClient(opts);
}
exports.sessionBus = sessionBus;
//# sourceMappingURL=connection.js.map